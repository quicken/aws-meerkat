AWSTemplateFormatVersion: 2010-09-09
Description: "Provisions the stack required by Meerkat the devops bot. Meerkat can be subscribed to SNS Topics and is especially usefull when listening for code pipeline life cycle events and cloudwatch alarms."

# devops-pipeline-monitor v1.8.0
Parameters:
  NameSpace:
    Type: String
    Description: "Resources that are not explicitly named are prefixed with this value. {NameSpace}meerkatbot"
    Default: "devops-"

  TableName:
    Type: String
    Description: "The name of the DynamoDb table that is used to track pipeline event."
    Default: meerkatbot

  CodeBucketName:
    Type: String
    Description: The S3 bucket that contains the lambda source code zip archive.

  CodeKey:
    Type: String
    Description: The S3 key to the zip file that contains the lambda source code. (no leading slash)
    Default: code-pipeline-monitor.v1.8.0.zip

  EnvGitProvider:
    Type: String
    AllowedValues:
      - bitbucket
      - github
    Description: "The service hosting the repository."
    Default: github

  EnvGitUsername:
    Type: String
    Description: "The username that is used to connect to the git provider."

  EnvGitPassword:
    Type: String
    Description: "The password that is used to connect to the git provider. For GitHub this is a Personal Access Token with permission to read commits."

  EnvChatService:
    Type: String
    AllowedValues:
      - discord
      - slack
    Description: "The chat service used to deliver notifications."
    Default: discord

  EnvDiscordAvatar:
    Type: String
    Description: "A public URL to an image that will be used as the discord avatar. (128px X 128px)"
    Default: ""

  EnvDiscordUsername:
    Type: String
    Description: "Override the displayed username when posting to Discord."
    Default: ""

  EnvDiscordWebhook:
    Type: String
    Description: "The discord webhook to which notifications are posted."
    Default: ""

  EnvSlackBotToken:
    Type: String
    Description: "The Slack Bot Token (xoxb-) required for sending messages and user mentions."
    Default: ""

  EnvSlackChannel:
    Type: String
    Description: "The Slack channel name or ID where notifications should be sent."
    Default: ""

  EnvDeployArn:
    Type: String
    Description: "The role ARN assumed when retrieving CodeDeploy failure information across AWS accounts. Optional."
    Default: ""

  EnvTraceEvents:
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Description: "Enable tracing of SNS events for debugging."
    Default: "false"

  CostCenter:
    Type: String
    Description: "The value applied to the costcenter tag."
    Default: meerkatbot

Resources:
  DBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: executionId
          AttributeType: S
      KeySchema:
        - AttributeName: executionId
          KeyType: HASH
      TableName: !Ref TableName
      Tags:
        - Key: costcenter
          Value: !Ref CostCenter

  SnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${NameSpace}meerkatbot"
        - Key: costcenter
          Value: !Ref CostCenter

  SnsPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Sid: ServicesInOwningAccount
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - SNS:GetTopicAttributes
              - SNS:SetTopicAttributes
              - SNS:AddPermission
              - SNS:RemovePermission
              - SNS:DeleteTopic
              - SNS:Subscribe
              - SNS:ListSubscriptionsByTopic
              - SNS:Publish
              - SNS:Receive
            Resource: !Ref SnsTopic
            Condition:
              StringEquals:
                AWS:SourceOwner: !Ref AWS::AccountId

          - Sid: AWSCodeStarNotifications
            Effect: Allow
            Principal:
              Service: codestar-notifications.amazonaws.com
            Action:
              - SNS:Publish
            Resource: !Ref SnsTopic
            Condition:
              StringEquals:
                AWS:SourceAccount: !Ref AWS::AccountId
          - Sid: CrossAccountCloudWatchAlarms
            Effect: Allow
            Principal:
              AWS: "*"
            Action: "SNS:Publish"
            Resource: !Ref SnsTopic
            Condition:
              ArnLike:
                aws:SourceArn:
                  - !Sub "arn:aws:clouwatch:${AWS::Region}:${AWS::AccountId}:alarm:*"
      Topics:
        - !Ref SnsTopic

  LambdaServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub "arn:aws:iam::${AWS::AccountId}:root"
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Description: "This service role is assumed by the pipeline-monitor Lambdas."
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      RoleName: !Sub "${NameSpace}meerkatbot"
      Tags:
        - Key: costcenter
          Value: !Ref CostCenter

  LambdaServicePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${NameSpace}meerkatbot"
      Description: "This policy grants the permissions required by the meerkat bot."
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: DynamoDb
            # Permission to use a Dynamo DB Table to track pipeline lifecycle events.
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
            Effect: Allow
            Resource: !GetAtt DBTable.Arn

          - Sid: CodeBuild
            # Permission to retrieve aditional information from builds.
            Effect: Allow
            Action:
              - codebuild:BatchGetBuilds
            Resource:
              - "*"

          - Sid: CodeDeploy
            # Permission to retrieve aditional information from deployments.
            Effect: Allow
            Action:
              - codedeploy:BatchGetDeploymentTargets
              - codedeploy:ListDeploymentTargets
            Resource:
              - "*"
          - Sid: FetchCodeFromS3
            # Permission to retrieve source code from S3.
            Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::${CodeBucketName}/*"
      Roles:
        - !Ref LambdaServiceRole

  MeerkatLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${NameSpace}meerkatbot"
      Description: "Meerkat forwards SNS messages to Discord or Slack. Meerkat will enrich messages received from GitHub, Bitbucket, Cloudwatch, Code Build, Code Pipeline and Code Deploy to assist troubleshooting issues. The lambda must be subscribed to a SNS Topic."
      Handler: "index.handler"
      Environment:
        Variables:
          CHAT_SERVICE: !Ref EnvChatService
          GIT_PROVIDER: !Ref EnvGitProvider
          GIT_USERNAME: !Ref EnvGitUsername
          GIT_PASSWORD: !Ref EnvGitPassword
          DB_TABLE: !Ref DBTable
          DISCORD_AVATAR: !Ref EnvDiscordAvatar
          DISCORD_USERNAME: !Ref EnvDiscordUsername
          DISCORD_WEBHOOK: !Ref EnvDiscordWebhook
          SLACK_BOT_TOKEN: !Ref EnvSlackBotToken
          SLACK_CHANNEL: !Ref EnvSlackChannel
          DEPLOY_ARN: !Ref EnvDeployArn
          TRACE_EVENTS: !Ref EnvTraceEvents
      PackageType: Zip
      Role: !GetAtt LambdaServiceRole.Arn
      Runtime: nodejs20.x
      Code:
        S3Bucket: !Ref CodeBucketName
        S3Key: !Ref CodeKey
      Tags:
        - Key: costcenter
          Value: !Ref CostCenter

  MeerkatLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MeerkatLambda
      Principal: sns.amazonaws.com
      SourceArn: !Ref SnsTopic

  SnsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      Endpoint: !GetAtt MeerkatLambda.Arn
      TopicArn: !Ref SnsTopic

Outputs:
  TopicArn:
    Description: "The ARN of the topic that can be used to receive code pipeline life cycle events."
    Value: !Ref SnsTopic
    Export:
      Name: !Sub "${AWS::StackName}-pipeline-monitor-topic"

  PipeLineLambdaArn:
    Description: "The ARN of the pipeline-monitor lambda."
    Value: !GetAtt MeerkatLambda.Arn
    Export:
      Name: !Sub "${AWS::StackName}-pipeline-monitor-lambda"
